#!/usr/bin/env python3
import os

os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'contractor.settings' )

import django
django.setup()

from contractor.BluePrint.models import FoundationBluePrint, StructureBluePrint
from contractor.Site.models import Site
from contractor.Building.models import Structure, FoundationNetworkInterface, ComplexStructure, Dependancy
from contractor.Utilities.models import RealNetworkInterface, AddressBlock, Address, ReservedAddress, DynamicAddress
from contractor_plugins.VirtualBox.models import VirtualBoxFoundation, VirtualBoxComplex
from contractor_plugins.AWS.models import AWSEC2Foundation
from contractor_plugins.Docker.models import DockerFoundation, DockerComplex
from contractor_plugins.Manual.models import ManualFoundation

fbp_manual = FoundationBluePrint.objects.get( pk='generic-manual' )
fbp_vm = FoundationBluePrint.objects.get( pk='generic-virtualbox' )
fbp_aws = FoundationBluePrint.objects.get( pk='generic-awsec2-micro' )
fbp_dkr = FoundationBluePrint.objects.get( pk='generic-docker' )
sbp_xenial = StructureBluePrint.objects.get( pk='generic-xenial' )

print( 'creating sites...' )
s1 = Site( name='site1', description='Test Site 1' )
s1.config_values[ 'domain_name' ] = 'site1.local'
s1.config_values[ 'dns_servers' ] = [ '127.0.0.1' ]
s1.config_values[ 'dns_search' ] = [ 'site1.local', 'local' ]
s1.full_clean()
s1.save()

s2 = Site( name='site2', description='Test Site 2' )
s2.config_values[ 'domain_name' ] = 's2.site1.local'
s2.config_values[ '{dns_search' ] = [ 's2.site1.local' ]
s2.config_values[ 'dns_servers' ] = [ '10.0.0.1' ]
s2.parent = s1
s2.full_clean()
s2.save()

print( 'creating networks...' )
addr1_block = AddressBlock( site=s1, subnet='192.168.200.0', gateway_offset=1, prefix=24 )
addr1_block.full_clean()
addr1_block.save()

addr2_block = AddressBlock( site=s2, subnet='169.254.0.0', gateway_offset=1, prefix=24 )
addr2_block.full_clean()
addr2_block.save()

addrlo_block = AddressBlock( site=s1, subnet='127.0.0.0', prefix=8 )
addrlo_block.full_clean()
addrlo_block.save()

addrawspri_block = AddressBlock( site=s1, subnet='172.31.0.0', gateway_offset=1, prefix=16 )
addrawspri_block.full_clean()
addrawspri_block.save()

addrawspub1_block = AddressBlock( site=s1, subnet='52.0.0.0', gateway_offset=1, prefix=6 )
addrawspub1_block.full_clean()
addrawspub1_block.save()

addrawspub2_block = AddressBlock( site=s1, subnet='32.0.0.0', gateway_offset=1, prefix=6 )
addrawspub2_block.full_clean()
addrawspub2_block.save()

for i in range( 2, 10 ):
  addr = ReservedAddress( address_block=addr1_block, offset=i, reason='switch reserved' )
  addr.full_clean()
  addr.save()

addr = ReservedAddress( address_block=addr1_block, offset=10, reason='resource server' )
addr.full_clean()
addr.save()

for i in range( 220, 225 ):
  addr = DynamicAddress( address_block=addr1_block, offset=i )
  addr.full_clean()
  addr.save()

print( 'creating local dev box and cluster...' )
fdn_dev = ManualFoundation( site=s1, blueprint=fbp_manual, locator='localdev' )
fdn_dev.full_clean()
fdn_dev.save()
fdn_dev.setBuilt()

iface = RealNetworkInterface( name='lo', is_provisioning=True )
iface.full_clean()
iface.save()

fni = FoundationNetworkInterface( foundation=fdn_dev, interface=iface, physical_location='lo' )
fni.full_clean()
fni.save()

str_dev = Structure( site=s1, blueprint=sbp_xenial, hostname='localdev', foundation=fdn_dev )
str_dev.auto_build = False
str_dev.full_clean()
str_dev.save()
str_dev.setBuilt()

addr = Address( networked=str_dev, address_block=addrlo_block, interface_name='lo', offset=1, is_primary=True )
addr.full_clean()
addr.save()

print( 'creating manual foundation(s)...' )
fdn_manual1 = ManualFoundation( site=s1, blueprint=fbp_manual, locator='oldserver1' )
fdn_manual1.full_clean()
fdn_manual1.save()

print( 'creating virtualbox foundation(s)...' )
cpx_vm = VirtualBoxComplex( site=s1, name='localvm', description='virtualbox complex' )
cpx_vm.full_clean()
cpx_vm.save()

cpx_member = ComplexStructure( complex=cpx_vm, structure=str_dev )
cpx_member.full_clean()
cpx_member.save()

fdn_vm1 = VirtualBoxFoundation( site=s1, blueprint=fbp_vm, locator='test1-vb' )
fdn_vm1.virtualbox_host = cpx_vm
fdn_vm1.config_values = { 'memory_size': 512 }
fdn_vm1.full_clean()
fdn_vm1.save()

iface = RealNetworkInterface( name='eth0', is_provisioning=True )
iface.full_clean()
iface.save()

fni = FoundationNetworkInterface( foundation=fdn_vm1, interface=iface, physical_location='eth0' )
fni.full_clean()
fni.save()

fdn_vm2 = VirtualBoxFoundation( site=s1, blueprint=fbp_vm, locator='test2-vb' )
fdn_vm2.virtualbox_host = cpx_vm
fdn_vm2.config_values = { 'memory_size': 512 }
fdn_vm2.full_clean()
fdn_vm2.save()

iface = RealNetworkInterface( name='eth0', is_provisioning=True )
iface.full_clean()
iface.save()

fni = FoundationNetworkInterface( foundation=fdn_vm2, interface=iface, physical_location='eth0' )
fni.full_clean()
fni.save()

print( 'creating aws foundation(s)...' )
fdn_aws1 = AWSEC2Foundation( site=s1, blueprint=fbp_aws, locator='test1-aws' )
fdn_aws1.config_values = {}
fdn_aws1.full_clean()
fdn_aws1.save()

iface = RealNetworkInterface( name='eth0', is_provisioning=True )
iface.full_clean()
iface.save()

fni = FoundationNetworkInterface( foundation=fdn_aws1, interface=iface, physical_location='eth0' )
fni.full_clean()
fni.save()

print( 'creating docker foundation(s)...' )
cpx_dkr_l = DockerComplex( site=s1, name='localdkr', description='docker local complex' )
cpx_dkr_l.full_clean()
cpx_dkr_l.save()

cpx_member = ComplexStructure( complex=cpx_dkr_l, structure=str_dev )
cpx_member.full_clean()
cpx_member.save()

fdn_dkr1 = DockerFoundation( site=s1, blueprint=fbp_dkr, locator='test1-docker' )
fdn_dkr1.container_host = cpx_dkr_l
fdn_dkr1.config_values = {}
fdn_dkr1.full_clean()
fdn_dkr1.save()

iface = RealNetworkInterface( name='eth0', is_provisioning=True )
iface.full_clean()
iface.save()

fni = FoundationNetworkInterface( foundation=fdn_dkr1, interface=iface, physical_location='eth0' )
fni.full_clean()
fni.save()

print( 'creating manual box structure(s)...' )
str_manual1 = Structure( site=s1, blueprint=sbp_xenial, hostname='testmanual1', foundation=fdn_manual1 )
str_manual1.auto_build = False
str_manual1.full_clean()
str_manual1.save()

addr = Address( networked=str_manual1, address_block=addr1_block, interface_name='eth0', offset=51, is_primary=True )
addr.full_clean()
addr.save()

print( 'creating virtual box structure(s)...' )
str_vm1 = Structure( site=s1, blueprint=sbp_xenial, hostname='testvm1', foundation=fdn_vm1 )
str_vm1.auto_build = False
str_vm1.full_clean()
str_vm1.save()

addr = Address( networked=str_vm1, address_block=addr1_block, interface_name='eth0', offset=101, is_primary=True )
addr.full_clean()
addr.save()

str_vm2 = Structure( site=s1, blueprint=sbp_xenial, hostname='testvm2', foundation=fdn_vm2 )
str_vm2.auto_build = False
str_vm2.full_clean()
str_vm2.save()

addr = Address( networked=str_vm2, address_block=addr1_block, interface_name='eth0', offset=102, is_primary=True )
addr.full_clean()
addr.save()

print( 'creating aws structure(s)...' )
str_aws1 = Structure( site=s1, blueprint=sbp_xenial, hostname='testaws1', foundation=fdn_aws1 )
str_aws1.auto_build = False
str_aws1.full_clean()
str_aws1.save()

addr = Address( networked=str_aws1, interface_name='eth0', is_primary=True )
addr.full_clean()
addr.save()

print( 'creating docker structure(s)...' )
str_dkr1 = Structure( site=s1, blueprint=sbp_xenial, hostname='testdkr1', foundation=fdn_dkr1 )
str_dkr1.auto_build = True
str_dkr1.full_clean()
str_dkr1.save()

addr = Address( networked=str_dkr1, pointer=Address.objects.get( networked=str_dev, interface_name='lo' ), interface_name='eth0', is_primary=True )
addr.full_clean()
addr.save()

print( 'creating docker inside vm structure(s)...' )
cpx_dkr_r = DockerComplex( site=s1, name='rmtdkr', description='docker remote complex', built_percentage=100 )
cpx_dkr_r.full_clean()
cpx_dkr_r.save()

cpx_member = ComplexStructure( complex=cpx_dkr_r, structure=str_vm1 )
cpx_member.full_clean()
cpx_member.save()

cpx_member = ComplexStructure( complex=cpx_dkr_r, structure=str_vm2 )
cpx_member.full_clean()
cpx_member.save()

fdn_dkr2 = DockerFoundation( site=s1, blueprint=fbp_dkr, locator='test2-docker' )
fdn_dkr2.container_host = cpx_dkr_r
fdn_dkr2.config_values = {}
fdn_dkr2.full_clean()
fdn_dkr2.save()

iface = RealNetworkInterface( name='eth0', is_provisioning=True )
iface.full_clean()
iface.save()

fni = FoundationNetworkInterface( foundation=fdn_dkr2, interface=iface, physical_location='eth0' )
fni.full_clean()
fni.save()

fdn_dkr3 = DockerFoundation( site=s1, blueprint=fbp_dkr, locator='test3-docker' )
fdn_dkr3.container_host = cpx_dkr_r
fdn_dkr3.config_values = {}
fdn_dkr3.full_clean()
fdn_dkr3.save()

iface = RealNetworkInterface( name='eth0', is_provisioning=True )
iface.full_clean()
iface.save()

fni = FoundationNetworkInterface( foundation=fdn_dkr3, interface=iface, physical_location='eth0' )
fni.full_clean()
fni.save()

print( 'creating remote docker structure(s)...' )
str_dkr2 = Structure( site=s1, blueprint=sbp_xenial, hostname='dkrhttp', foundation=fdn_dkr2 )
str_dkr2.auto_build = True
str_dkr2.full_clean()
str_dkr2.save()

addr = Address( networked=str_dkr2, pointer=Address.objects.get( networked=str_vm1, interface_name='eth0' ), interface_name='eth0', is_primary=True )
addr.full_clean()
addr.save()

str_dkr3 = Structure( site=s1, blueprint=sbp_xenial, hostname='dkrproxy', foundation=fdn_dkr3 )
str_dkr3.auto_build = True
str_dkr3.full_clean()
str_dkr3.save()

addr = Address( networked=str_dkr3, pointer=Address.objects.get( networked=str_vm1, interface_name='eth0' ), interface_name='eth0', is_primary=True )
addr.full_clean()
addr.save()

dep = Dependancy( foundation=fdn_dkr3, structure=str_dkr2, link='soft' )
dep.full_clean()
dep.save()
