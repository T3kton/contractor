#!/usr/bin/env python3
"""
Use this as a test
"""
import os

os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'contractor.settings' )

import django
django.setup()

from contractor.BluePrint.models import FoundationBluePrint, StructureBluePrint, Script
from contractor.Site.models import Site
from contractor.Directory.models import Zone
from contractor.Building.models import Structure, ComplexStructure, Dependency
from contractor.Utilities.models import RealNetworkInterface, AddressBlock, Address, ReservedAddress, DynamicAddress
from contractor.Forman.lib import createJob
from contractor.plugins.Manual.models import ManualFoundation, ManualComplex, ManualComplexedFoundation

fbp_manual = FoundationBluePrint.objects.get( pk='manual-foundation-base' )
sbp_manual = StructureBluePrint.objects.get( pk='manual-structure-base' )

print( 'creating sites...' )
zl = Zone()
zl.name = 'local'
zl.full_clean()
zl.save()

zs1 = Zone()
zs1.name = 'site1'
zs1.parent = zl
zs1.full_clean()
zs1.save()

zs2 = Zone()
zs2.name = 's2'
zs2.parent = zs1
zs2.full_clean()
zs2.save()

s1 = Site( name='site1', description='Test Site 1' )
s1.zone = zs1
s1.config_values[ 'domain_name' ] = 'site1.test'
s1.config_values[ 'dns_servers' ] = [ '127.0.0.1' ]
s1.config_values[ 'dns_search' ] = [ 'site1.test', 'test' ]
s1.config_values[ 'ntp_servers' ] = [ 'ntp.ubuntu.com' ]
s1.full_clean()
s1.save()

s2 = Site( name='site2', description='Test Site 2' )
s1.zone = zs2
s2.config_values[ 'domain_name' ] = 's2.site1.test'
s2.config_values[ '<dns_search' ] = [ 's2.site1.test' ]
s2.config_values[ 'dns_servers' ] = [ '10.0.0.1' ]
s2.parent = s1
s2.full_clean()
s2.save()

print( 'creating networks...' )
addr1_block = AddressBlock( site=s1, subnet='192.168.200.0', gateway_offset=1, prefix=24, name='block 1' )
addr1_block.full_clean()
addr1_block.save()

addr2_block = AddressBlock( site=s2, subnet='169.254.0.0', gateway_offset=1, prefix=24, name='block 2' )
addr2_block.full_clean()
addr2_block.save()

for i in range( 3, 10 ):
  addr = ReservedAddress( address_block=addr1_block, offset=i, reason='switch reserved' )
  addr.full_clean()
  addr.save()

for i in range( 220, 225 ):
  addr = DynamicAddress( address_block=addr1_block, offset=i )
  addr.full_clean()
  addr.save()

print( 'Creating contractor...')
fdn_contractor = ManualFoundation( site=s1, blueprint=fbp_manual, locator='contractor')
fdn_contractor.full_clean()
fdn_contractor.save()

iface = RealNetworkInterface( name='eth0', is_provisioning=True )
iface.foundation = fdn_contractor
iface.physical_location = 'eth0'
iface.full_clean()
iface.save()

strct_contractor = Structure( site=s1, blueprint=sbp_manual, hostname='contractor', foundation=fdn_contractor )
strct_contractor.full_clean()
strct_contractor.save()
strct_contractor.setBuilt()

addr = Address( networked=strct_contractor, address_block=addr1_block, interface_name='eth0', offset=10, is_primary=True )
addr.full_clean()
addr.save()

print( 'Creating Switch...' )
fdn_switch = ManualFoundation( site=s1, blueprint=fbp_manual, locator='switch' )
fdn_switch.full_clean()
fdn_switch.save()

iface = RealNetworkInterface( name='mgnt', is_provisioning=True )
iface.foundation = fdn_switch
iface.physical_location = 'mgnt'
iface.full_clean()
iface.save()

for i in range( 0, 25 ):
  iface = RealNetworkInterface( name='fe0-{0}'.format( i ) )
  iface.foundation = fdn_switch
  iface.physical_location = 'fe0-{0}'.format( i )
  iface.full_clean()
  iface.save()

str_switch = Structure( site=s1, blueprint=sbp_manual, hostname='switch', foundation=fdn_switch )
str_switch.full_clean()
str_switch.save()

addr = Address( networked=str_switch, address_block=addr1_block, interface_name='mgnt', offset=2, is_primary=True )
addr.full_clean()
addr.save()

print( 'Making a complex...' )
cpx = ManualComplex( site=s1, name='mnlcpx', description='manual complex', built_percentage=70 )
cpx.full_clean()
cpx.save()

for i in range( 1, 11 ):
  fdn = ManualFoundation( site=s1, blueprint=fbp_manual, locator='cpx{0}'.format( i ) )
  fdn.full_clean()
  fdn.save()

  iface = RealNetworkInterface( name='eth0', is_provisioning=True )
  iface.foundation = fdn
  iface.physical_location = 'eth0'
  iface.full_clean()
  iface.save()

  dep = Dependency( foundation=fdn, structure=str_switch, link='soft' )
  dep.full_clean()
  dep.save()

  strct = Structure( site=s1, blueprint=sbp_manual, hostname='cpx{0}'.format( i ), foundation=fdn )
  strct.full_clean()
  strct.save()

  addr = Address( networked=strct, address_block=addr1_block, interface_name='eth0', offset=20 + i, is_primary=True )
  addr.full_clean()
  addr.save()

  createJob( 'create', fdn )
  createJob( 'create', strct )

  cpx_member = ComplexStructure( complex=cpx, structure=strct )
  cpx_member.full_clean()
  cpx_member.save()

fdn_strmgr = ManualFoundation( site=s1, blueprint=fbp_manual, locator='strgmgr' )
fdn_strmgr.full_clean()
fdn_strmgr.save()

iface = RealNetworkInterface( name='eth0', is_provisioning=True )
iface.foundation = fdn_strmgr
iface.physical_location = 'eth0'
iface.full_clean()
iface.save()

dep = Dependency( foundation=fdn_strmgr, structure=str_switch, link='soft' )
dep.full_clean()
dep.save()

strct_strmgr = Structure( site=s1, blueprint=sbp_manual, hostname='strgmgr', foundation=fdn_strmgr )
strct_strmgr.full_clean()
strct_strmgr.save()

addr = Address( networked=strct_strmgr, address_block=addr1_block, interface_name='eth0', offset=40, is_primary=True )
addr.full_clean()
addr.save()

createJob( 'create', fdn_strmgr )
createJob( 'create', strct_strmgr )

print( 'Making a storage cluster...' )
for i in range( 1, 5 ):
  fdn = ManualFoundation( site=s1, blueprint=fbp_manual, locator='strg{0}'.format( i ) )
  fdn.full_clean()
  fdn.save()

  iface = RealNetworkInterface( name='eth0', is_provisioning=True )
  iface.foundation = fdn
  iface.physical_location = 'eth0'
  iface.full_clean()
  iface.save()

  dep = Dependency( foundation=fdn, structure=str_switch, link='soft' )
  dep.full_clean()
  dep.save()

  strct = Structure( site=s1, blueprint=sbp_manual, hostname='strg{0}'.format( i ), foundation=fdn )
  strct.full_clean()
  strct.save()

  addr = Address( networked=strct, address_block=addr1_block, interface_name='eth0', offset=40 + i, is_primary=True )
  addr.full_clean()
  addr.save()

  createJob( 'create', fdn )
  createJob( 'create', strct )

  #  TODO: re-enable this ?
  # print( '******************')
  # try:
  #   print( fdn_strmgr.dependency )
  # except dependency.DoesNotExist:
  #   print( 'nope' )
  #
  # print( strct.dependency_set.all() )
  #
  # print( Dependency.objects.filter( foundation=fdn_strmgr ) )
  #
  # dep = Dependency( foundation=fdn_strmgr, structure=strct, link='soft' )
  # dep.full_clean()
  # dep.save()

print( 'Adding to Complex...' )
for i in range( 1, 5 ):
  fdn = ManualComplexedFoundation( site=s1, blueprint=fbp_manual, locator='cpxmbr{0}'.format( i ), complex_host=cpx )
  fdn.full_clean()
  fdn.save()

  iface = RealNetworkInterface( name='eth0', is_provisioning=True )
  iface.foundation = fdn
  iface.physical_location = 'eth0'
  iface.full_clean()
  iface.save()

  dep = Dependency( foundation=fdn, structure=strct_strmgr, create_script_name='utility', destroy_script_name='utility2', link='hard' )
  dep.full_clean()
  dep.save()

  strct = Structure( site=s1, blueprint=sbp_manual, hostname='cpxmbr{0}'.format( i ), foundation=fdn )
  strct.full_clean()
  strct.save()

  addr = Address( networked=strct, address_block=addr1_block, interface_name='eth0', offset=100 + i, is_primary=True )
  addr.full_clean()
  addr.save()

  createJob( 'create', fdn )
  createJob( 'create', strct )

if os.environ.get( 'DEMO_MODE', False ):
  print( 'enabling demo mode' )
  for name in ( 'manual-foundation-create', 'manual-foundation-destroy', 'manual-foundation-utility', 'manual-structure-create', 'manual-structure-destroy', 'manual-structure-utility' ):
    try:
      script = Script.objects.get( name=name )
    except Script.DoesNotExist:
      print( 'Unable to find script "{0}",  skipped'.format( name ) )
      continue

    script.script = 'delay( seconds=5 )'
    script.full_clean()
    script.save()
