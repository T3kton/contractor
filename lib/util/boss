#!/usr/bin/env python3
import os
os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'contractor.settings' )

import django
django.setup()

import sys
import argparse
import pprint
import time

from django.core.exceptions import ObjectDoesNotExist
from contractor.Building.models import Foundation, Structure, Dependency
from contractor.Foreman.models import BaseJob
from contractor.Foreman.lib import createJob
from contractor.lib.config import getConfig
from contractor.PostOffice.lib import registerEvent


class CLIUser:
  username = 'cli'


def _get_job( target ):
  if isinstance( target, Foundation ):
    try:
      return target.foundationjob
    except ( AttributeError, ObjectDoesNotExist ):
      pass

  if isinstance( target, Structure ):
    try:
      return target.structurejob
    except ( AttributeError, ObjectDoesNotExist ):
      pass

  if isinstance( target, Dependency ):
    try:
      return target.dependencyjob
    except ( AttributeError, ObjectDoesNotExist ):
      pass

  return None


def _clear_job( target ):
  job = _get_job( target )
  if job is None:
    print( 'No Job to Delete' )

  else:
    job.delete()
    print( 'Job Deleted' )


def _wait_for_job( job_id ):
  print( 'Waiting for job "{0}"'.format( job_id ) )
  while True:
    try:
      job = BaseJob.objects.get( pk=job_id )
    except BaseJob.DoesNotExist:
      return

    print( 'Curent status "{0}" at {1}%, Waiting...'.format( job.state, job.progress ) )
    time.sleep( 10 )


def main():
  parser = argparse.ArgumentParser( description='Boss/Manipulate Structures and Foundations and their jobs', epilog='Only one option from task or force state, if more than one is specified, the force state option is ignored' )
  group = parser.add_argument_group( 'target' )
  group.add_argument( 'id', help='foundation/structure id' )
  type_group = group.add_mutually_exclusive_group( required=True )
  type_group.add_argument( '-s', '--structure', help='boss arround a structure', action='store_true' )
  type_group.add_argument( '-f', '--foundation', help='boss arround a foundation', action='store_true' )
  type_group.add_argument( '-d', '--dependency', help='boss arround a dependency', action='store_true' )

  group = parser.add_argument_group( 'task' )
  task_group = group.add_mutually_exclusive_group()
  task_group.add_argument(       '--do-create', help='submit create job', action='store_true' )
  task_group.add_argument(       '--do-destroy', help='submit destroy job', action='store_true' )
  task_group.add_argument(       '--run-script', help='submit a script job', metavar='SCRIPT NAME' )
  task_group.add_argument(       '--pause', help='pause active job', action='store_true' )
  task_group.add_argument(       '--resume', help='resume a paused job', action='store_true' )
  task_group.add_argument(       '--reset', help='reset error on active job', action='store_true' )
  task_group.add_argument(       '--rollback', help='rollback active job', action='store_true' )
  task_group.add_argument(       '--done', help='set active job to done', action='store_true' )
  task_group.add_argument(       '--clear-dispatched', help='clear the dispatched flag, ie: unstuck a job that subcontractor dropped', action='store_true' )
  task_group.add_argument(       '--show-job', help='display curent job', action='store_true' )
  task_group.add_argument(       '--show-config', help='display config', action='store_true' )
  task_group.add_argument(       '--delete', help='delete target', action='store_true' )

  group = parser.add_argument_group( 'force state', 'WARNING!!! Use with care, it is possible to leave some foundataions/structures orphand if you are not carefull' )
  force_group = group.add_mutually_exclusive_group()
  force_group.add_argument(       '--planned', help='force a foundataion/structure to planned(or destroyed) state', action='store_true' )
  force_group.add_argument(       '--located', help='force a foundation to located state', action='store_true' )
  force_group.add_argument(       '--built', help='force a foundataion/structure to built state', action='store_true' )
  force_group.add_argument(       '--clear-job', help='clear any associated jobs', action='store_true' )

  group = parser.add_argument_group( 'other options' )
  group.add_argument(             '--notify-webhook', help='Notify webhook of the change in state, use with --planned and --built', action='store_true' )
  group.add_argument(             '--chain', help='Chain to Foundation''s Structure as well, with --do-create', action='store_true' )
  group.add_argument(             '--wait', help='Wait for created job to finish before returning', action='store_true' )

  args = parser.parse_args()

  target = None
  if args.foundation:
    try:
      target = Foundation.objects.get( pk=args.id ).subclass
    except Structure.DoesNotExist:
      print( 'Unable to find Foundation "{0}"'.format( args.id ) )

  elif args.structure:
    try:
      target = Structure.objects.get( pk=args.id )
    except Structure.DoesNotExist:
      print( 'Unable to find Structure "{0}"'.format( args.id ) )

  elif args.dependency:
    try:
      target = Dependency.objects.get( pk=args.id )
    except Structure.DoesNotExist:
      print( 'Unable to find Dependency "{0}"'.format( args.id ) )

  else:
    print( '-f, -s, -d must be specified' )
    sys.exit( 1 )

  if target is None:
    print( 'No target found' )
    sys.exit( 1 )

  print( 'Working with "{0}"'.format( target ) )

  if args.do_create:
    try:
      rc = target.doCreate( CLIUser() )
    except Exception as e:
      print( 'Error creating create job: "{0}"({1})'.format( e, type( e ) ) )
      sys.exit( 1 )

    print( 'Create Job for {0} created, job #{1}.'.format( target, rc ) )

    if args.chain and isinstance( target, Foundation ):
      try:
        rc = target.structure.doCreate( CLIUser() )
      except Exception as e:
        print( 'Error creating create chained job: "{0}"({1})'.format( e, type( e ) ) )
        sys.exit( 1 )

      print( 'Create Job for {0} created, chained job #{1}.'.format( target, rc ) )

    if args.wait:
      _wait_for_job( rc )

    sys.exit( 0 )

  if args.do_destroy:
    try:
      rc = target.doDestroy( CLIUser() )
    except Exception as e:
      print( 'Error creating destroy job: "{0}"({1})'.format( e, type( e ) ) )
      sys.exit( 1 )

    print( 'Destroy Job for {0} created, job #{1}.'.format( target, rc ) )
    if args.wait:
      _wait_for_job( rc )

    sys.exit( 0 )

  if args.delete:
    if not target.can_delete:
      print( 'Target has dependancies/structure can not delete' )
      sys.exit( 1 )

    if target.state == 'built':
      print( 'Target is built, can not delete' )
      sys.exit( 1 )

    target.delete()
    print( 'Target Deleted' )
    sys.exit( 0 )

  if args.run_script:
    try:
      rc = createJob( args.run_script, target )
    except Exception as e:
      print( 'Error creating "{1}" job: "{0}"'.format( e, args.run_script ) )
      sys.exit( 1 )

    print( '"{2}" Job for {0} created, job #{1}.'.format( target, rc, args.run_script ) )
    if args.wait:
      _wait_for_job( rc )

    sys.exit( 0 )

  if args.reset:
    job = _get_job( target )
    if job is None:
      print( 'No Job to Reset' )
      sys.exit( 1 )

    else:
      try:
        job.reset()
      except ValueError as e:
        print( 'Error resetting job: "{0}"'.format( str( e ) ) )
        sys.exit( 1 )
      sys.exit( 0 )

  if args.pause:
    job = _get_job( target )
    if job is None:
      print( 'No Job to Pause' )
      sys.exit( 1 )

    else:
      try:
        job.pause()
      except ValueError as e:
        print( 'Error pausing job: "{0}"'.format( str( e ) ) )
        sys.exit( 1 )
      sys.exit( 0 )

  if args.resume:
    job = _get_job( target )
    if job is None:
      print( 'No Job to Resume' )
      sys.exit( 1 )

    else:
      try:
        job.resume()
      except ValueError as e:
        print( 'Error resuming job: "{0}"'.format( str( e ) ) )
        sys.exit( 1 )
      sys.exit( 0 )

  if args.rollback:
    job = _get_job( target )
    if job is None:
      print( 'No Job to Rollback' )
      sys.exit( 1 )

    else:
      try:
        job.rollback()
      except ValueError as e:
        print( 'Error rolling back job: "{0}"'.format( str( e ) ) )
        sys.exit( 1 )
      sys.exit( 0 )

  if args.done:
    job = _get_job( target )
    if job is None:
      print( 'No Job to set to done' )
      sys.exit( 1 )

    else:
      if job.state != 'queued':
        print( 'Can only "done" a job if it is queued' )
        sys.exit( 1 )
      job.state = 'done'
      job.full_clean()
      job.save()
      sys.exit( 0 )

  if args.clear_dispatched:
    job = _get_job( target )
    if job is None:
      print( 'No Job' )
      sys.exit( 0 )

    if job.state != 'queued':
      print( 'Can only "clear_dispatched" a job if it is queued' )
      sys.exit( 1 )

    job.clear_dispatched()
    print( 'Dispatched flag cleared' )
    sys.exit( 0 )

  if args.show_job:
    job = _get_job( target )
    if job is None:
      print( 'No Job' )
      sys.exit( 0 )

    try:
      pcnt_complete = '{0}%'.format( job.status[0][0] )
    except IndexError:
      pcnt_complete = ''

    pp = pprint.PrettyPrinter()
    print( """
Job Id:        {0}
Script Name:   {1}
State:         {2}
Pcnt Complete: {3}
Message:       {4}
Created:       {5}
Updated:       {6}
Status:
{7}""".format( job.pk, job.script_name, job.state, pcnt_complete, job.message, job.created, job.updated, pp.pformat( job.status ) ) )
    sys.exit( 0 )

  if args.show_config:
    config = getConfig( target )
    pp = pprint.PrettyPrinter()
    pp.pprint( config )
    sys.exit( 0 )

  if args.planned:
    _clear_job( target )
    target.setDestroyed()
    registerEvent( target, name='destroy' )
    print( '{0} now set to planned.'.format( target ) )
    sys.exit( 0 )

  if args.located:
    if not isinstance( target, Foundation ):
      print( 'Can only set Foundations to located' )
      sys.exit( 1 )

    _clear_job( target )
    target.setLocated()
    print( '{0} now set to located.'.format( target ) )
    sys.exit( 0 )

  if args.built:
    _clear_job( target )
    target.setBuilt()
    registerEvent( target, name='create' )
    print( '{0} now set to built.'.format( target ) )
    sys.exit( 0 )

  if args.clear_job:
    _clear_job( target )
    sys.exit( 0 )

  print( 'unknown boss task' )
  sys.exit( 1 )

if __name__ == '__main__':
  main()
