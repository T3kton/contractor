#!/usr/bin/env python3
import os
os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'contractor.settings' )

import django
django.setup()

import sys
import toml
import argparse
from contractor.BluePrint.models import FoundationBluePrint, StructureBluePrint, BluePrintScript, Script, PXE

# TODO: some way to remove
# TODO: fix bug when re-adding a Strcutrue blueprint clears out all the foundation blueprint links that allready existed (something like that), I think it's some in the deleting during update


# No this isn't the full solution, for now we are punting and putting anything
# that is a parent first, eventually we need to deal with parents with parents
# that need to be in the right order
def bluePrintOrder( entity_map ):
  parent_list = []
  entity_list = set( entity_map.keys() )

  for name in entity_map:
    parent_list += entity_map[ name ].get( 'parents', [] )

  parent_list = set( parent_list )

  parent_list = parent_list.intersection( entity_list )

  return list( parent_list ) + list( entity_list - parent_list )


def loadBluePrintCommon( blueprint, target ):
  for name in ( 'description', 'config_values' ):
    try:
      setattr( blueprint, name, target[ name ] )
    except KeyError:
      pass


def setScripts( blueprint, target ):
  script_map = {}

  for name, script in target.get( 'scripts', {} ).items():
    try:
      script_map[ name ] = Script.objects.get( name=script )
    except Script.DoesNotExist:
      print( 'Unable to find Script "{0}", stopping.'.format( script ) )
      sys.exit( 1 )

  for name, script in script_map.items():
    try:
      bps = BluePrintScript.objects.get( blueprint=blueprint, name=name )
      if bps.script != script:
        bps.script = script
        bps.full_clean()
        bps.save()

    except BluePrintScript.DoesNotExist:
      bps = BluePrintScript( blueprint=blueprint, script=script, name=name )
      bps.full_clean()
      bps.save()

  for bps in BluePrintScript.objects.filter( blueprint=blueprint ):
    if bps.name not in script_map:
      bps.delete()


def loadStructureBlueprint( name, target, mode ):
  print( 'Structure BluePrint "{0}"...'.format( name ) )
  try:
    blueprint = StructureBluePrint.objects.get( name=name )
    if mode == 'add':
      print( 'Allready exists, skipping.' )
      return
  except StructureBluePrint.DoesNotExist:
    if mode == 'update':
      print( 'Does not exist, skipping.' )
      return
    blueprint = StructureBluePrint( name=name )

  loadBluePrintCommon( blueprint, target )

  blueprint.full_clean()
  blueprint.save()

  foundation_blueprint_list = []
  for name in target.get( 'foundation_blueprints', [] ):
    try:
      foundation_blueprint_list.append( FoundationBluePrint.objects.get( name=name ) )
    except FoundationBluePrint.DoesNotExist:
      print( 'Unable to find Foundation BluePrint "{0}"'.format( name ) )

  if blueprint.foundation_blueprint_list != foundation_blueprint_list:  # TODO: should we think of a way to perserve links made in other blueprint files?
    blueprint.foundation_blueprint_list = foundation_blueprint_list
    blueprint.full_clean()
    blueprint.save()

  parent_list = []
  for parent in target.get( 'parents', [] ):
    try:
      parent_list.append( StructureBluePrint.objects.get( name=parent ) )
    except StructureBluePrint.DoesNotExist:
      print( 'Unable to find Structure BluePrint "{0}" as parent to "{1}", stopping.'.format( parent, name ) )
      sys.exit( 1 )

  if blueprint.parent_list != parent_list:
    blueprint.parent_list = parent_list
    blueprint.full_clean()
    blueprint.save()

  setScripts( blueprint, target )


def loadFoundationBlueprint( name, target, mode ):
  print( 'Foundation BluePrint "{0}"...'.format( name ) )
  try:
    blueprint = FoundationBluePrint.objects.get( name=name )
    if mode == 'add':
      print( 'Allready exists, skipping.' )
      return
  except FoundationBluePrint.DoesNotExist:
    if mode == 'update':
      print( 'Does not exist, skipping.' )
      return
    blueprint = FoundationBluePrint( name=name )

  loadBluePrintCommon( blueprint, target )

  blueprint.foundation_type_list = target.get( 'foundation_types', [] )
  blueprint.template = target.get( 'template', {} )
  blueprint.physical_interface_names = target.get( 'physical_interface_names', [] )

  blueprint.full_clean()
  blueprint.save()

  parent_list = []
  for parent in target.get( 'parents', [] ):
    try:
      parent_list.append( FoundationBluePrint.objects.get( parent ) )
    except FoundationBluePrint.DoesNotExist:
      print( 'Unable to find Foundation BluePrint "{0}" as parent to "{1}", stopping.'.format( parent, name ) )
      sys.exit( 1 )

  if blueprint.parent_list != parent_list:
    blueprint.parent_list = parent_list
    blueprint.full_clean()
    blueprint.save()

  setScripts( blueprint, target )


def loadScript( name, target, mode ):
  print( 'Script "{0}"...'.format( name ) )
  try:
    script = Script.objects.get( name=name )
    if mode == 'add':
      print( 'Allready exists, skipping.' )
      return
  except Script.DoesNotExist:
    if mode == 'update':
      print( 'Does not exist, skipping.' )
      return
    script = Script( name=name )

  script.description = target.get( 'description', '' )
  script.script = target.get( 'script', '' )
  try:
    script.full_clean()
    script.save()
  except Exception as e:
    print( 'Exception "{0}" while loading script "{1}"'.format( e, script.name ) )
    sys.exit( 1 )


def loadPXE( name, target, mode ):
  print( 'PXE "{0}"...'.format( name ) )
  try:
    pxe = PXE.objects.get( name=name )
    if mode == 'add':
      print( 'Allready exists, skipping.' )
      return
  except PXE.DoesNotExist:
    if mode == 'update':
      print( 'Does not exist, skipping.' )
      return
    pxe = PXE( name=name )

  pxe.boot_script = target.get( 'boot_script', '' )
  pxe.template = target.get( 'template', '' )
  try:
    pxe.full_clean()
    pxe.save()
  except Exception as e:
    print( 'Exception "{0}" while loading PXE "{1}"'.format( e, pxe.name ) )
    sys.exit( 1 )


def loadSFLinks( link_list, mode ):
  for structureblueprint, foundationblueprint in link_list:
    print( 'Adding Foundation "{0}" to Structure "{1}"...'.format( foundationblueprint, structureblueprint ) )
    try:
      structureblueprint = StructureBluePrint.objects.get( name=structureblueprint )
    except StructureBluePrint.DoesNotExist:
      print( 'Unable to find Structure BluePrint "{0}", skipping...'.format( structureblueprint ) )  # we skip b/c we might be adding to structures that may not exist
      continue

    try:
      foundationblueprint = FoundationBluePrint.objects.get( name=foundationblueprint )
    except FoundationBluePrint.DoesNotExist:
      print( 'Unable to find Foundation BluePrint "{0}", skipping...'.format( foundationblueprint ) )  # we skip b/c we might be adding to foundations that may not exist
      continue

    if foundationblueprint not in structureblueprint.foundation_blueprint_list.all():
      structureblueprint.foundation_blueprint_list.add( foundationblueprint )
      structureblueprint.full_clean()
      structureblueprint.save()


def main():
  parser = argparse.ArgumentParser( description='Contractor BluePrint Loader' )
  parser.add_argument( '-t', '--type', help='Entity type to update/add, options: all, pxe, structure, foundation, script, links. default: all', metavar='TYPE', default='all' )
  parser.add_argument( '-n', '--name', help='Name of the Eninity to update/add, default is to update/add all name, links are not affected by this', metavar='NAME', default=None )
  group = parser.add_mutually_exclusive_group()
  group.add_argument( '-a', '--add', help='Only add new Eninities', action='store_true' )
  group.add_argument( '-u', '--update', help='Only update existing Eninities', action='store_true' )
  parser.add_argument( 'file', help='blueprint .toml file' )

  args = parser.parse_args()

  if not os.path.exists( args.file ):
    print( 'file "{0}" not found'.format( args.file ) )
    sys.exit( 1 )

  try:
    item_map = toml.load( args.file )
  except FileNotFoundError:
    print( 'Error opening "{0}"'.format( args.file ) )
    sys.exit( 1 )

  except toml.TomlDecodeError as e:
    print( 'Error parsing "{0}": {1}'.format( args.file, e ) )
    sys.exit( 1 )

  mode = 'both'
  if args.add:
    mode = 'add'
  elif args.update:
    mode = 'update'

  if args.type in ( 'all', 'script' ):
    for name in item_map.get( 'script', {} ):
      if args.name is not None and args.name != name:
        continue
      loadScript( name, item_map[ 'script' ][ name ], mode )

  if args.type in ( 'all', 'foundation' ):
    for name in bluePrintOrder( item_map.get( 'foundation', {} ) ):
      if args.name is not None and args.name != name:
        continue
      loadFoundationBlueprint( name, item_map[ 'foundation' ][ name ], mode )

  if args.type in ( 'all', 'structure' ):
    for name in bluePrintOrder( item_map.get( 'structure', {} ) ):
      if args.name is not None and args.name != name:
        continue
      loadStructureBlueprint( name, item_map[ 'structure' ][ name ], mode )

  if args.type in ( 'all', 'pxe' ):
    for name in item_map.get( 'pxe', {} ):
      if args.name is not None and args.name != name:
        continue
      loadPXE( name, item_map[ 'pxe' ][ name ], mode )

  if args.type in ( 'all', 'links' ):
    loadSFLinks( item_map.get( 'sflinks', [] ), mode )

  print( 'Done' )
  sys.exit( 0 )

if __name__ == '__main__':
  main()
