#!/usr/bin/env python3
import os

os.environ.setdefault( 'DJANGO_SETTINGS_MODULE', 'contractor.settings' )

import django
django.setup()

import sys
import argparse
import subprocess

from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from contractor import settings
from contractor.lib.ip import CIDRSubnet, StrToIp, IpToStr
from contractor.BluePrint.models import FoundationBluePrint, StructureBluePrint
from contractor.Building.models import Structure
from contractor.Site.models import Site
from contractor.Directory.models import Zone, Entry
from contractor.Utilities.models import RealNetworkInterface, AddressBlock, Address, ReservedAddress, DynamicAddress
from contractor.plugins.Manual.models import ManualFoundation

parser = argparse.ArgumentParser( description='Contractor SetupWizzard, must be run as root' )
parser.add_argument( '--no-ip-reservation', help='do not reserve static and dynamic ips', action='store_true' )
parser.add_argument( '--dns-server', help='set the dns server setting for site1, otherwise it will be set to the detected ip', metavar='IP ADDRESS' )
parser.add_argument( '--proxy-server', help='set the http proxy (mirror_proxy) setting for site1', metavar='HOST' )
parser.add_argument( '--primary-interface', help='which interface to use as the primary interface for the contractor structure, if not specified it will be auto detected', metavar='INTERFACE' )

args = parser.parse_args()

if os.getuid() != 0:
  print( 'This must be run as root' )
  sys.exit( 1 )

print( 'Getting network config...' )

if args.primary_interface:
  contractor_iface = args.primary_interface
  contractor_gateway = None  # TODO: if this value get's used, need to do some /sbin/ip magic to find the gateway for this interface if there is one

else:
  line = subprocess.check_output( [ '/sbin/ip', 'route', 'get', '1.0.0.0' ], universal_newlines=True ).splitlines()[0]
  parts = line.split()
  contractor_iface = parts[4]
  contractor_gateway = parts[2]

print( 'Interface Name: "{0}"'.format( contractor_iface ) )

contractor_ip_address = None

for line in subprocess.check_output( [ '/sbin/ip', 'address', 'show', contractor_iface ], universal_newlines=True ).splitlines():
  parts = line.split()
  if parts[0] == 'inet':
    ( contractor_ip_address, network_prefix ) = parts[1].split( '/' )
    network_prefix = int( network_prefix )
    break

if contractor_ip_address is None:
  print( 'Unable to discover IP Address' )
  sys.exit( 1 )

contractor_dns = None
for line in open( '/etc/resolv.conf', 'r' ).readlines():
  parts = line.split()
  try:
    if parts[0] == 'nameserver':
      contractor_dns = parts[1]
      break

  except IndexError:
    continue

if contractor_dns is None:
  print( 'Unable to discover DNS' )
  sys.exit( 1 )

network_subnet = IpToStr( CIDRSubnet( StrToIp( contractor_ip_address ), network_prefix ) )

contractor_ip_offset = StrToIp( contractor_ip_address ) - StrToIp( network_subnet )

print( '  --- Detected Network Configuration ---')
print( 'Network/Prefix: "{0}/{1}"'.format( network_subnet, network_prefix ) )
print( ' Contractor Ip: "{0}", offset "{1}"'.format( contractor_ip_address, contractor_ip_offset ) )
if contractor_gateway is not None:
  print( '       Gateway: "{0}"'.format( contractor_gateway ) )
print( '           DNS: "{0}"'.format( contractor_dns ) )
print()

if args.dns_server is not None:
  print( 'Setting DNS to: {0}'.format( args.dns_server ) )

if args.proxy_server is not None:
  print( 'Setting Proxy Server to: {0}'.format( args.proxy_server ) )

fbp_manual = FoundationBluePrint.objects.get( pk='manual-foundation-base' )
sbp_xenial = StructureBluePrint.objects.get( pk='manual-structure-base' )

print()
print( 'creating site...' )
zl = Zone()
zl.name = 'test'
zl.full_clean()
zl.save()

zs1 = Zone()
zs1.name = 'site1'
zs1.parent = zl
zs1.full_clean()
zs1.save()

s1 = Site( name='site1', description='Site 1' )
s1.zone = zs1
s1.config_values[ 'domain_name' ] = 'site1.test'
if args.dns_server is not None:
  s1.config_values[ 'dns_servers' ] = [ args.dns_server ]
else:
  s1.config_values[ 'dns_servers' ] = [ contractor_ip_address ]

s1.config_values[ 'dns_search' ] = [ 'site1.test', 'test' ]
s1.config_values[ 'ntp_servers' ] = [ 'ntp.ubuntu.com' ]

if args.proxy_server is not None:
  s1.config_values[ 'mirror_proxy' ] = args.proxy_server

s1.full_clean()
s1.save()

print( 'creating network...' )
addr1_block = AddressBlock( site=s1, subnet=network_subnet, gateway_offset=1, prefix=network_prefix, name='main' )
addr1_block.full_clean()
addr1_block.save()

print( 'contractor entry...' )
fdn_dev = ManualFoundation( site=s1, blueprint=fbp_manual, locator='contractor' )
fdn_dev.full_clean()
fdn_dev.save()
fdn_dev.setBuilt()

iface = RealNetworkInterface( name=contractor_iface, is_provisioning=True )
iface.foundation = fdn_dev
iface.physical_location = contractor_iface
iface.full_clean()
iface.save()

str_dev = Structure( site=s1, blueprint=sbp_xenial, hostname='contractor', foundation=fdn_dev )
str_dev.full_clean()
str_dev.save()
str_dev.setBuilt()

addr = Address( networked=str_dev, address_block=addr1_block, interface_name=contractor_iface, offset=contractor_ip_offset, is_primary=True )
addr.full_clean()
addr.save()

e = Entry( zone=zs1, type='CNAME' )
e.name = 'static'
e.target = 'contractor.site1.test.'
e.full_clean()
e.save()

if not args.no_ip_reservation:
  print( 'reserving address offsets from 2 - 20...')
  for i in range( 2, 21 ):
    addr = ReservedAddress( address_block=addr1_block, offset=i, reason='network reserved' )
    try:
      addr.full_clean()
    except ValidationError:
      print( 'WARNING offset "{0}" is allready in use, skipped.'.format( i ) )
      continue

    addr.save()

  print( 'using offsets 21 - 29 for dynamic pool...' )
  for i in range( 21, 30 ):
    addr = DynamicAddress( address_block=addr1_block, offset=i )
    try:
      addr.full_clean()
    except ValidationError:
      print( 'WARNING offset "{0}" is allready in use, skipped.'.format( i ) )
      continue
    addr.save()

print( 'Configuring settings file...' )
filename = settings.__file__

configured = False
for line in open( filename, 'r' ).readlines():
  if line.startswith( 'BIND_NS_LIST =' ):
    parts = line.split( '=' )
    if parts[1].strip() != '[]':
      configured = True

    break

if not configured:
  data = open( filename, 'r' ).read()

  data = data.replace( 'BIND_NS_LIST = []', 'BIND_NS_LIST = {0}'.format( [ '{0}.contractor.site1.test'.format( contractor_iface ) ] ) )

  open( filename, 'w' ).write( data )

print( 'Generating Bind files...' )
subprocess.check_call( [ '/usr/lib/contractor/cron/genDNS' ] )

print( 'Configuring Bind...' )
configured = False
for line in open( '/etc/bind/named.conf.local', 'r' ).readlines():
  if line.strip() == 'include "/etc/bind/contractor/dns.master";':
    configured = True
    break

if not configured:
  fp = open( '/etc/bind/named.conf.local', 'w' )
  fp.write( """//
// Do any local configuration here
//

include "/etc/bind/contractor/dns.master";
""" )
  fp.close()

  fp = open( '/etc/bind/named.conf.options', 'w' )
  fp.write( """options {{
  directory "/var/cache/bind";

  forwarders {{
    {0};
  }};

  dnssec-validation no;

  auth-nxdomain no;    # conform to RFC1035
  listen-on-v6 {{ any; }};
}};
""".format( contractor_dns ) )
  fp.close()

print( 'Creating root user...' )
User.objects.create_superuser( username='root', password='root', email='root@test.com' )

print( 'Done!' )
