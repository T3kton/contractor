[ structure.linux-base ]
  description = 'Base Linux'
  scripts = { 'create' = 'linux-create', 'destroy' = 'linux-destroy' }

[ script.linux-create ]
  description ='Install Linux'
  script = """# pxe boot and install
check_port = 22

if ( foundation.type == 'AWSEC2' ) then
begin( description='Provision AWS EC2' )
# should allready be ready to go and started
end
elif ( foundation.type == 'Docker' ) then
begin( description='Provision Docker' )
check_port = config.docker_check_port
foundation.start()
end
else
begin( description='Provision From Installer' )
if not structure.provisioning_interface then
  fatal_error( msg='Provisioning Interface Not Defined' )

dhcp.set_pxe( interface=structure.provisioning_interface, pxe=installer_pxe )
foundation.power_on()
delay( seconds=300 )
foundation.wait_for_poweroff()

dhcp.set_pxe( interface=structure.provisioning_interface, pxe='normal-boot' )
foundation.power_on()
end

if check_port then
begin( description='Verify Running' )
iputils.wait_for_port( target=structure.provisioning_ip, port=check_port )
end"""

[ script.linux-destroy ]
  description ='Uninstall Linux'
  script = """# foundation cleanup should wipe/destroy the disks
if ( foundation.type == 'AWSEC2' ) then
begin( description='Stop AWS EC2' )
# foundation will kill it
end
elif ( foundation.type == 'Docker' ) then
begin( description='Stop Docker' )
foundation.stop()
end
else
begin( description='Power Off' )
foundation.power_off()
# Wipe MBR/Disk
end
"""

[ pxe.normal-boot ]
  boot_script = """echo Booting form Primary Boot Disk
sanboot --no-describe --drive 0x80 || echo Primary Boot Disk is not Bootable"""
  template = ''
